@using AutoUpdaterDotNET;
@using Installer.Common.Framework
@using MudBlazor.Utilities
@using Installer.Package
@using Installer.Common.Logger
@using Installer.Common.Models
@using Installer.LightningReturnFF13.Components.Dialogs
@using Installer.LightningReturnFF13.Components.Buttons
@using Installer.Common.GameLocation
@using Installer.Common.localization
@using Installer.Common.Service
@inject IInfoProvider GameLocationProvider
@inject IPackageInfo PackageInfo
@inject InstallerServiceProvider InstallerServiceProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.ExtraSmall"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   NoHeader="true"
                   Position="DialogPosition.Center"
                   CloseOnEscapeKey="true" />
<MudThemeProvider IsDarkMode="true" Theme="_lightningReturnTheme" />
<MudSnackbarProvider />

<MudContainer Style="all: unset;">
    <MudImage Fluid="true" ObjectFit="ObjectFit.Cover" src="images\Lightning_Returns_Final_Fantasy_XIII_Logo.webp" alt="" />
    <MudImage Class="sprite" Fluid="true" ObjectFit="ObjectFit.Cover" src="@SpriteImage" alt="Sprite" />
    <MudToolBar Class="absolute top-px right-0 bg-transparent">
        <MudIconButton Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit" OnClick="ShowConfigDialog" />
        <MudIconButton Icon="@Icons.Material.Outlined.Info" Color="Color.Inherit" OnClick="ShowCreditsDialog" />
    </MudToolBar>
    <div class="container absolute bottom-4 left-7 text-xl text-blue-400/30 font-semibold block list-none cursor-pointer menu-list">
        <Loading>
            <Install OnMouseover="() => ChangeImage(_spriteList[0])" OnMouseLeave="() => ChangeImage(_spriteList[4])"></Install>
        </Loading>
        <Update OnMouseover="() => ChangeImage(_spriteList[1])" OnMouseLeave="() => ChangeImage(_spriteList[4])"></Update>
        <Uninstall OnMouseover="() => ChangeImage(_spriteList[4])" OnMouseLeave="() => ChangeImage(_spriteList[4])"></Uninstall>
    </div>
</MudContainer>

@code {
    private readonly ILogger _logger = LogManager.GetLogger();
    private string SpriteImage { get; set; } = "images/five.webp";
    private readonly IList<string> _spriteList = new List<string>(5)
    { "images/first.webp", "images/two.webp", "images/third.webp", "images/four.webp", "images/five.webp" };

    private void ChangeImage(string sprite)
    {
        SpriteImage = sprite;
        StateHasChanged();
    }

    private async Task ShowConfigDialog() =>
        await DialogService.ShowAsync<ConfigDialog>("Configurações", options: new DialogOptions { MaxWidth = MaxWidth.Medium });

    private async Task ShowCreditsDialog()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                DisableBackdropClick = true
            };
        await DialogService.ShowAsync<CreditsDialog>("Dialog", options);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                AutoUpdater.ParseUpdateInfoEvent += AutoUpdaterOnParseUpdateInfoEvent;
                AutoUpdater.CheckForUpdateEvent += AutoUpdaterOnCheckForUpdateEvent;

                AutoUpdater.Start(InstallerServiceProvider.UriLrff13);
                AutoUpdater.RunUpdateAsAdmin = false;

                await GetTranslationPackageUpdate();

                if (!InstallerServiceProvider.GameLocationInfo.IsValidGamePath()) GameLocationProvider.Provider();
            }
            catch (HttpRequestException httpRequestException)
            {
                _logger.Error(httpRequestException, Localization.Localizer.Get("Exceptions.WriteFailed").ConvertLineBreaksToHtml());

                var parameters = new DialogParameters
                {
                    { "ContentText", (MarkupString)Localization.Localizer.Get("Exceptions.HttpRequestBroken")},
                    { "ButtonCancel", false }
                };

                await DialogService.ShowAsync<CommonDialogs>(title: httpRequestException.GetType().Name, parameters: parameters,
                    options: new DialogOptions { MaxWidth = MaxWidth.Large, NoHeader = false });
            }
            catch (UnauthorizedAccessException accessException)
            {
                string message = Localization.Localizer.Get("Exceptions.WriteFailed").ConvertLineBreaksToHtml();
                _logger.Error(accessException, message);

                var parameters = new DialogParameters
                {
                    { "ContentText", (MarkupString)accessException.Message},
                    { "ButtonCancel", false }
                };

                await DialogService.ShowAsync<CommonDialogs>(title: accessException.GetType().Name, parameters: parameters, options: new DialogOptions { MaxWidth = MaxWidth.Small, NoHeader = false });
            }
            catch (Exception err)
            {
                _logger.Error(err, err.GetType().Name);

                var parameters = new DialogParameters
                {
                    { "ContentText", (MarkupString)err.Message},
                    { "ButtonCancel", false }
                };

                await DialogService.ShowAsync<CommonDialogs>(title: err.GetType().Name, parameters: parameters, options: new DialogOptions { MaxWidth = MaxWidth.Medium, NoHeader = false });
            }
        }
    }

    private async Task GetTranslationPackageUpdate()
    {
        (string translationId, _, string translationHash, _) = await InstallerServiceProvider.GetJsonDataAsync();

        if (PackageInfo.IsValid(id: translationId, hash: translationHash)) return;

        Snackbar.Add(Localization.Localizer.Get("SnackMessages.TranslationUpdate"), Severity.Info, config =>
        {
            config.RequireInteraction = true;
            config.ShowCloseIcon = true;
            config.Onclick = async _ => { await PackageInfo.GetPackageTranslation(); };
        });
    }

    private void AutoUpdaterOnCheckForUpdateEvent(UpdateInfoEventArgs args)
    {
        if (args.Error is not null || !args.IsUpdateAvailable) return;

        try
        {
            Snackbar.Add(Localization.Localizer.Get("SnackMessages.AppUpdate"), Severity.Info, config =>
            {
                config.RequireInteraction = true;
                config.ShowCloseIcon = true;
                config.Onclick = _ =>
                {
                    if (AutoUpdater.DownloadUpdate(args)) Application.Exit();
                    return Task.CompletedTask;
                };
            });
        }
        catch (Exception err)
        {
            _logger.Error(err, err.GetType().Name);

            DialogService.ShowMessageBox(
                err.GetType().Name,
                err.Message,
                yesText: "Ok!");
        }
    }

    private void AutoUpdaterOnParseUpdateInfoEvent(ParseUpdateInfoEventArgs args)
    {
        JsonData json = InstallerServiceProvider.JsonDataSync;
        args.UpdateInfo = new UpdateInfoEventArgs
            {
                CurrentVersion = json.UpdateApp.Version,
                ChangelogURL = json.UpdateApp.Changelog,
                DownloadURL = json.UpdateApp.Url,
                Mandatory = new Mandatory
                {
                    Value = json.UpdateApp.Mandatorys.Value,
                    MinimumVersion = json.UpdateApp.Mandatorys.MinVersion,
                    UpdateMode = (Mode)json.UpdateApp.Mandatorys.Mode
                },
                CheckSum = new CheckSum
                {
                    Value = json.UpdateApp.Checksum.Value,
                    HashingAlgorithm = json.UpdateApp.Checksum.HashingAlgorithm
                }
            };
    }

    readonly MudTheme _lightningReturnTheme = new()
        {
            PaletteDark = new PaletteDark
            {
                Primary = (MudColor)"#3b82f6",
                Background = (MudColor)"#0F172A",
                TextPrimary = (MudColor)"#3b82f6",
            }
        };

}

<style>
    .sprite {
        max-height: 170px;
    }

    .menu-list {
        text-shadow: 2px 2px 5px rgba(59, 130, 246, 0.3);
    }

        .menu-list li {
            display: inline-block;
            width: 100%;
            line-height: 1.25em;
            background-image: url("images/lightning_effect.webp");
            background-clip: text;
            -webkit-background-clip: text;
            background-size: 50%;
            background-repeat: repeat-x;
        }

            .menu-list li:hover {
                font-size: 130%;
                transition: all 0.2s;
            }
</style>