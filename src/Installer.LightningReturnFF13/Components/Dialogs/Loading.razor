@using Installer.Common.Framework
<div style="display: @DisplayClassLoading">
    <MudOverlay Absolute="true" Visible="@LoadingConfiguration.IsLoading"></MudOverlay>
    <div class="font-bold text-blue-500">
        <span class="relative font-sans text-sm uppercase overflow-hidden">
            @LoadingConfiguration.Title
        </span>
    </div>
    <MudProgressLinear Class="mt-0 w-1/2" Color="Color.Primary"
                       Value="@LoadingConfiguration.CurrentStep"
                       Indeterminate="@LoadingConfiguration.IsIndeterminate"
                       Max="@LoadingConfiguration.TotalSteps"
                       Size="Size.Large">
        <MudText Typo="Typo.subtitle1" Class="text-blue-800">
            @LoadingConfiguration.GetPercentage()%
        </MudText>
    </MudProgressLinear>
</div>

<div style="display: @DisplayClassChildContent">
    <CascadingValue Value="@LoadingConfiguration">
        @ChildContent
    </CascadingValue>
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    private LoadingHandler LoadingConfiguration { get; set; } = new();

    private string DisplayClassLoading => LoadingConfiguration.IsLoading ? "initial" : "none";
    private string DisplayClassChildContent => LoadingConfiguration.IsLoading ? "none" : "initial";

    protected override void OnParametersSet()
    {
        LoadingConfiguration.PropertyChanged += (_, _) => StateHasChanged();
    }
}