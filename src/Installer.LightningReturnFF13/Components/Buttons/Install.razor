@using Shared.Interfaces
@using Components.Dialogs
@using Installer.Package
@using Installer.Common.Framework
@using Installer.Common.Framework.Extensions
@using Installer.Common.localization
@using Installer.Common.Service
@inject InstallerServiceProvider InstallerServiceProvider
@inject ITranslationIntaller Installer
@inject IPackageInfo PackageInfo
@inject IDialogService DialogService

<li @onmouseover="HandleMouseover" @onmouseleave="HandleMouseleave" @onclick="HandlerClickTask">@_btnInstallText</li>

@code {
    [Parameter]
    public EventCallback<string> OnMouseover { get; set; }
    [Parameter]
    public EventCallback<string> OnMouseLeave { get; set; }
    [CascadingParameter]
    public LoadingHandler LoadingConfiguration { get; set; } = default!;

    private string _btnInstallText = Localization.Localizer.Get("HomePage.Main.Buttons.Install");

    private void HandleMouseover()
    {
        OnMouseover.InvokeAsync(arg: string.Empty);
    }
    private void HandleMouseleave()
    {
        OnMouseover.InvokeAsync(arg: string.Empty);
    }

    private async Task HandlerClickTask()
    {
        DialogOptions options;

        try
        {
            PackageInfo.Validate();
            InstallerServiceProvider.GameLocationInfo.Validate();

            string totalSizeSuffix = InstallerServiceProvider.GameLocationInfo.IsValidGamePath() ?
                Path.GetPathRoot(path: InstallerServiceProvider.GameLocationInfo.RootDirectory).GetDriveFreeSpace().SizeSuffix() : string.Empty;

            string freeSpaceMessage = Localization.Localizer.GetFormat("pt", "Messages.FreeSpaceText", totalSizeSuffix);

            DialogResult result = await ShowModal(contextText: freeSpaceMessage, buttonText: "Instalar", cancelButton: true,
                options: new DialogOptions { MaxWidth = MaxWidth.Small });

            if (!result.Canceled)
            {
                await Installer.Install(progress: LoadingConfiguration);

                await ShowModal(Localization.Localizer.Get("Messages.InstallTranslationCompleteMessage"));
            }
        }
        catch (Exception e)
        {
            options = new DialogOptions
                {
                    CloseButton = false,
                    MaxWidth = MaxWidth.Large,
                    NoHeader = false
                };

            await ShowModal(contextText: e.Message, options: options, title: e.GetType().Name);
        }
    }

    private async Task<DialogResult> ShowModal(string contextText, DialogOptions options = default!, string title = "", string buttonText = "Ok", bool cancelButton = false)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", (MarkupString)contextText},
            { "ButtonCancel", cancelButton },
            { "ButtonText", buttonText }
        };

        IDialogReference? dialog = await DialogService.ShowAsync<CommonDialogs>(title: title, parameters: parameters, options: options);
        return await dialog.Result;
    }
}
