@using Installer.Package
@using Installer.Common.Framework.Extensions
@using Installer.Common.Models
@using Installer.LightningReturnFF13.Components.Dialogs
@using Installer.Common.Abstract
@using Installer.Common.Framework
@using Installer.Common.localization
@using Installer.Common.Service
@inject InstallerServiceProvider InstallerServiceProvider
@inject IDialogService DialogService
@inject IPackageInfo PackageInfo


<li @onmouseover="HandleMouseover" @onmouseleave="HandleMouseleave" @onclick="Confirm">@_btnUpdate</li>


@code {
    [Parameter]
    public EventCallback<string> OnMouseover { get; set; }
    [Parameter]
    public EventCallback<string> OnMouseLeave { get; set; }

    private string _btnUpdate = Localization.Localizer.Get("HomePage.Main.Buttons.Update");
    private void HandleMouseover()
    {
        OnMouseover.InvokeAsync(string.Empty);
    }
    private void HandleMouseleave()
    {
        OnMouseover.InvokeAsync(string.Empty);
    }

    private async Task Confirm()
    {
        try
        {
            (string translationId, string appVersion) = await InstallerServiceProvider.GetJsonDataAsync();

            bool newAppVersion = InstallerServiceProvider.CheckAppVersion(appVersion);
            string localPackageDate = Localization.Localizer.Get("Messages.DateFromLocalTranslationText") + InstallerServiceProvider.PersistenceRegister.GetDateFromInstalledTranslation();
            string serverPackageDate = Localization.Localizer.Get("Messages.DateFromServerTranslationText") + translationId.ConvertFromUnixTimestamp();
            string appVersionMessage = Localization.Localizer.Get("Messages.LocalAppVersion") + appVersion;

            var parameters = new DialogParameters
        {
            { "NewAppVersion", newAppVersion },
            { "AppVersion", (MarkupString)appVersionMessage },
            { "ServerPackageDate", (MarkupString)localPackageDate },
            { "LocalPackageDate", (MarkupString)serverPackageDate },
            { "ButtonText", "Instalar" },
            { "Color", Color.Success }
        };

            IDialogReference? dialog = await DialogService.ShowAsync<UpdateDialog>("Confirm", parameters);
            DialogResult? result = await dialog.Result;

            if (result.Canceled) return;
            await TranslationUpdate();
        }
        catch (Exception e)
        {
            var errorParameters = new DialogParameters
            {
                { "ContentText", (MarkupString)e.Message },
                { "ButtonCancel", false }
            };

            var errorOptions = new DialogOptions
                {
                    CloseButton = false,
                    MaxWidth = MaxWidth.Large,
                    NoHeader = false
                };
            await DialogService.ShowAsync<CommonDialogs>(e.GetType().Name, errorParameters, errorOptions);
        }
    }

    private async Task TranslationUpdate()
    {
        (string translationId, _, string translationHash, string translationChangelog) = await InstallerServiceProvider.GetJsonDataAsync();
        string htmlTranslationUpdateMessage = Localization.Localizer.Get("Messages.TranslationUpdateMessage").ConvertLineBreaksToHtml();
        string translationUpdateMessage =
            string.IsNullOrEmpty(translationChangelog) ?
                htmlTranslationUpdateMessage : $"{htmlTranslationUpdateMessage}\n\nAté agora:\n{translationChangelog}".ConvertLineBreaksToHtml();

        if (!PackageInfo.IsValid(id: translationId, hash: translationHash))
        {
            bool? result = await DialogService.ShowMessageBox(
                InstallerBase.MessageTitle,
                translationUpdateMessage,
                yesText: Localization.Localizer.Get("HomePage.Main.MessageBoxButtons.TranslationUpdateYesText"),
                cancelText: Localization.Localizer.Get("HomePage.Main.MessageBoxButtons.TranslationUpdateCancelText"));

            if (result is true)
            {
                await PackageInfo.GetPackageTranslation();
            }
        }
    }
}
